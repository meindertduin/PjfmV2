/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AuthenticationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5004";
    }

    logout(): Observable<void> {
        let url_ = this.baseUrl + "/api/authentication/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 302) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class GebruikerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5004";
    }

    me(): Observable<GetCurrentGebruikerResponseModel> {
        let url_ = this.baseUrl + "/api/gebruikers/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMe(<any>response_);
                } catch (e) {
                    return <Observable<GetCurrentGebruikerResponseModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCurrentGebruikerResponseModel>><any>_observableThrow(response_);
        }));
    }

    protected processMe(response: HttpResponseBase): Observable<GetCurrentGebruikerResponseModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCurrentGebruikerResponseModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCurrentGebruikerResponseModel>(<any>null);
    }
}

@Injectable()
export class PlaybackClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5004";
    }

    groups(): Observable<PlaybackGroupDto[]> {
        let url_ = this.baseUrl + "/api/playback/groups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGroups(<any>response_);
                } catch (e) {
                    return <Observable<PlaybackGroupDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PlaybackGroupDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGroups(response: HttpResponseBase): Observable<PlaybackGroupDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaybackGroupDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PlaybackGroupDto[]>(<any>null);
    }
}

@Injectable()
export class SpotifyAuthenticationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5004";
    }

    authenticate(): Observable<void> {
        let url_ = this.baseUrl + "/api/spotify/authenticate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 302) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    callback(state: string | null | undefined, code: string | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/spotify/authenticate/callback?";
        if (state !== undefined && state !== null)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCallback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCallback(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processCallback(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class SpotifyNummersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5004";
    }

    update(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/spotify/nummers/update";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export class GetCurrentGebruikerResponseModel implements IGetCurrentGebruikerResponseModel {
    gebruikersId?: string | null;
    gebruikersNaam?: string | null;
    rollen?: GebruikerRol[] | null;

    constructor(data?: IGetCurrentGebruikerResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gebruikersId = _data["gebruikersId"] !== undefined ? _data["gebruikersId"] : <any>null;
            this.gebruikersNaam = _data["gebruikersNaam"] !== undefined ? _data["gebruikersNaam"] : <any>null;
            if (Array.isArray(_data["rollen"])) {
                this.rollen = [] as any;
                for (let item of _data["rollen"])
                    this.rollen!.push(item);
            }
            else {
                this.rollen = <any>null;
            }
        }
    }

    static fromJS(data: any): GetCurrentGebruikerResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentGebruikerResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gebruikersId"] = this.gebruikersId !== undefined ? this.gebruikersId : <any>null;
        data["gebruikersNaam"] = this.gebruikersNaam !== undefined ? this.gebruikersNaam : <any>null;
        if (Array.isArray(this.rollen)) {
            data["rollen"] = [];
            for (let item of this.rollen)
                data["rollen"].push(item);
        }
        return data; 
    }
}

export interface IGetCurrentGebruikerResponseModel {
    gebruikersId?: string | null;
    gebruikersNaam?: string | null;
    rollen?: GebruikerRol[] | null;
}

export enum GebruikerRol {
    Gebruiker = 0,
    Dj = 1,
}

export class PlaybackGroupDto implements IPlaybackGroupDto {
    groupId!: string;
    groupName!: string;
    currentlyPlayingNummer?: SpotifyNummer | null;
    listenersCount!: number;

    constructor(data?: IPlaybackGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"] !== undefined ? _data["groupId"] : <any>null;
            this.groupName = _data["groupName"] !== undefined ? _data["groupName"] : <any>null;
            this.currentlyPlayingNummer = _data["currentlyPlayingNummer"] ? SpotifyNummer.fromJS(_data["currentlyPlayingNummer"]) : <any>null;
            this.listenersCount = _data["listenersCount"] !== undefined ? _data["listenersCount"] : <any>null;
        }
    }

    static fromJS(data: any): PlaybackGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlaybackGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["groupName"] = this.groupName !== undefined ? this.groupName : <any>null;
        data["currentlyPlayingNummer"] = this.currentlyPlayingNummer ? this.currentlyPlayingNummer.toJSON() : <any>null;
        data["listenersCount"] = this.listenersCount !== undefined ? this.listenersCount : <any>null;
        return data; 
    }
}

export interface IPlaybackGroupDto {
    groupId: string;
    groupName: string;
    currentlyPlayingNummer?: SpotifyNummer | null;
    listenersCount: number;
}

export class Entity implements IEntity {

    constructor(data?: IEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Entity {
        data = typeof data === 'object' ? data : {};
        let result = new Entity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEntity {
}

export class SpotifyNummer extends Entity implements ISpotifyNummer {
    id!: number;
    titel!: string;
    gebruikerId!: string;
    spotifyNummerId!: string;
    artists!: string[];
    trackTermijn!: TrackTermijn;
    nummerDuurMs!: number;
    aangemaaktOp!: Date;

    constructor(data?: ISpotifyNummer) {
        super(data);
        if (!data) {
            this.artists = [];
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.titel = _data["titel"] !== undefined ? _data["titel"] : <any>null;
            this.gebruikerId = _data["gebruikerId"] !== undefined ? _data["gebruikerId"] : <any>null;
            this.spotifyNummerId = _data["spotifyNummerId"] !== undefined ? _data["spotifyNummerId"] : <any>null;
            if (Array.isArray(_data["artists"])) {
                this.artists = [] as any;
                for (let item of _data["artists"])
                    this.artists!.push(item);
            }
            else {
                this.artists = <any>null;
            }
            this.trackTermijn = _data["trackTermijn"] !== undefined ? _data["trackTermijn"] : <any>null;
            this.nummerDuurMs = _data["nummerDuurMs"] !== undefined ? _data["nummerDuurMs"] : <any>null;
            this.aangemaaktOp = _data["aangemaaktOp"] ? new Date(_data["aangemaaktOp"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SpotifyNummer {
        data = typeof data === 'object' ? data : {};
        let result = new SpotifyNummer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["titel"] = this.titel !== undefined ? this.titel : <any>null;
        data["gebruikerId"] = this.gebruikerId !== undefined ? this.gebruikerId : <any>null;
        data["spotifyNummerId"] = this.spotifyNummerId !== undefined ? this.spotifyNummerId : <any>null;
        if (Array.isArray(this.artists)) {
            data["artists"] = [];
            for (let item of this.artists)
                data["artists"].push(item);
        }
        data["trackTermijn"] = this.trackTermijn !== undefined ? this.trackTermijn : <any>null;
        data["nummerDuurMs"] = this.nummerDuurMs !== undefined ? this.nummerDuurMs : <any>null;
        data["aangemaaktOp"] = this.aangemaaktOp ? this.aangemaaktOp.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ISpotifyNummer extends IEntity {
    id: number;
    titel: string;
    gebruikerId: string;
    spotifyNummerId: string;
    artists: string[];
    trackTermijn: TrackTermijn;
    nummerDuurMs: number;
    aangemaaktOp: Date;
}

export enum TrackTermijn {
    Kort = 0,
    Middelmatig = 1,
    Lang = 2,
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}