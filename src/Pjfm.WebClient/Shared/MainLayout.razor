@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<PageTitle>Pjfm.WebClient</PageTitle>

<nav class="toolbar">
    @if (isDetailPage)
    {
        <button class="back-button" @onclick="GoBack">@("<--")</button>
    }
    @if (hasUser)
    {
        <div class="toolbar-right-info">
            <div class="user-info">
                <span class="m-m-r user-name">{$user.userName}</span>
            </div>
            <div class="toolbar-links">
                @if (showAuthenticationButton)
                {
                    <a class="toolbar-link" href="/api/spotify/authenticate">
                        [ Authenticate Spotify ]
                    </a>
                    <a href="/authentication/logout" class="m-xs-l toolbar-link toolbar-link__red">
                        [ logout ]
                    </a>
                }
            </div>
        </div>
    }
    else
    {
        <div class="toolbar-right-info">
            <a href="/user/login" class="flat-button flat-button__round flat-button__green ripple m-xs-x">Login</a>
            <a href="/user/register" class="flat-button flat-button__round flat-button__blue ripple m-xs-x">Register</a>
        </div>
    }
</nav>
<div class="view-container">
    @Body
</div>

@code
{
    private bool isDetailPage;
    private bool hasUser = false;
    private bool showAuthenticationButton = false;

    private void GoBack()
    {
        NavigationManager.NavigateTo("../");
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
        isDetailPage = !IsHomeRoute();
        base.OnInitialized();
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        isDetailPage = !IsHomeRoute();
        StateHasChanged();
    }

    private bool IsHomeRoute()
    {
        return NavigationManager.ToBaseRelativePath(NavigationManager.Uri) == String.Empty;
    }
}